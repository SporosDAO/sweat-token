/* tslint:disable */
/* eslint-disable */
/**
 * Sweat Token
 * Sweat Token API description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface ContactHandle
 */
export interface ContactHandle {
    /**
     * 
     * @type {object}
     * @memberof ContactHandle
     */
    'type': object;
    /**
     * 
     * @type {string}
     * @memberof ContactHandle
     */
    'value': string;
}
/**
 * 
 * @export
 * @interface DaoSettingsDto
 */
export interface DaoSettingsDto {
    /**
     * 
     * @type {string}
     * @memberof DaoSettingsDto
     */
    'chainId': string;
    /**
     * 
     * @type {string}
     * @memberof DaoSettingsDto
     */
    'daoId': string;
    /**
     * 
     * @type {string}
     * @memberof DaoSettingsDto
     */
    'discordWebhookUrl'?: string;
    /**
     * 
     * @type {string}
     * @memberof DaoSettingsDto
     */
    'discordWebhookBotName'?: string;
}
/**
 * 
 * @export
 * @interface JwtTokenDto
 */
export interface JwtTokenDto {
    /**
     * 
     * @type {string}
     * @memberof JwtTokenDto
     */
    'token': string;
}
/**
 * 
 * @export
 * @interface NoncePayloadDto
 */
export interface NoncePayloadDto {
    /**
     * 
     * @type {string}
     * @memberof NoncePayloadDto
     */
    'nonce': string;
    /**
     * 
     * @type {string}
     * @memberof NoncePayloadDto
     */
    'userId': string;
}
/**
 * 
 * @export
 * @interface SiwePayloadDto
 */
export interface SiwePayloadDto {
    /**
     * 
     * @type {object}
     * @memberof SiwePayloadDto
     */
    'message': object;
    /**
     * 
     * @type {string}
     * @memberof SiwePayloadDto
     */
    'userId': string;
    /**
     * 
     * @type {string}
     * @memberof SiwePayloadDto
     */
    'signature'?: string;
}
/**
 * 
 * @export
 * @interface UserDto
 */
export interface UserDto {
    /**
     * 
     * @type {Array<string>}
     * @memberof UserDto
     */
    'roles'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'userId': string;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'publicAddress': string;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'chainId': string;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'nonce': string;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'created': string;
    /**
     * 
     * @type {Array<ContactHandle>}
     * @memberof UserDto
     */
    'contacts'?: Array<ContactHandle>;
}

/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerGetProfile: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/auth/profile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} chainId 
         * @param {string} publicAddress 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerGetUser: async (chainId: string, publicAddress: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'chainId' is not null or undefined
            assertParamExists('authControllerGetUser', 'chainId', chainId)
            // verify required parameter 'publicAddress' is not null or undefined
            assertParamExists('authControllerGetUser', 'publicAddress', publicAddress)
            const localVarPath = `/api/auth/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (chainId !== undefined) {
                localVarQueryParameter['chainId'] = chainId;
            }

            if (publicAddress !== undefined) {
                localVarQueryParameter['publicAddress'] = publicAddress;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {SiwePayloadDto} siwePayloadDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerVerifySignature: async (siwePayloadDto: SiwePayloadDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'siwePayloadDto' is not null or undefined
            assertParamExists('authControllerVerifySignature', 'siwePayloadDto', siwePayloadDto)
            const localVarPath = `/api/auth/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(siwePayloadDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerGetProfile(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerGetProfile(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} chainId 
         * @param {string} publicAddress 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerGetUser(chainId: string, publicAddress: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NoncePayloadDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerGetUser(chainId, publicAddress, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {SiwePayloadDto} siwePayloadDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerVerifySignature(siwePayloadDto: SiwePayloadDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JwtTokenDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerVerifySignature(siwePayloadDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerGetProfile(options?: any): AxiosPromise<UserDto> {
            return localVarFp.authControllerGetProfile(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} chainId 
         * @param {string} publicAddress 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerGetUser(chainId: string, publicAddress: string, options?: any): AxiosPromise<NoncePayloadDto> {
            return localVarFp.authControllerGetUser(chainId, publicAddress, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {SiwePayloadDto} siwePayloadDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerVerifySignature(siwePayloadDto: SiwePayloadDto, options?: any): AxiosPromise<JwtTokenDto> {
            return localVarFp.authControllerVerifySignature(siwePayloadDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authControllerGetProfile(options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).authControllerGetProfile(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} chainId 
     * @param {string} publicAddress 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authControllerGetUser(chainId: string, publicAddress: string, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).authControllerGetUser(chainId, publicAddress, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SiwePayloadDto} siwePayloadDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authControllerVerifySignature(siwePayloadDto: SiwePayloadDto, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).authControllerVerifySignature(siwePayloadDto, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * DaoApi - axios parameter creator
 * @export
 */
export const DaoApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} chainId 
         * @param {string} daoId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        daoSettingsControllerGetSettings: async (chainId: string, daoId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'chainId' is not null or undefined
            assertParamExists('daoSettingsControllerGetSettings', 'chainId', chainId)
            // verify required parameter 'daoId' is not null or undefined
            assertParamExists('daoSettingsControllerGetSettings', 'daoId', daoId)
            const localVarPath = `/api/settings/{chainId}/{daoId}`
                .replace(`{${"chainId"}}`, encodeURIComponent(String(chainId)))
                .replace(`{${"daoId"}}`, encodeURIComponent(String(daoId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} daoId 
         * @param {string} chainId 
         * @param {DaoSettingsDto} daoSettingsDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        daoSettingsControllerSetSettings: async (daoId: string, chainId: string, daoSettingsDto: DaoSettingsDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'daoId' is not null or undefined
            assertParamExists('daoSettingsControllerSetSettings', 'daoId', daoId)
            // verify required parameter 'chainId' is not null or undefined
            assertParamExists('daoSettingsControllerSetSettings', 'chainId', chainId)
            // verify required parameter 'daoSettingsDto' is not null or undefined
            assertParamExists('daoSettingsControllerSetSettings', 'daoSettingsDto', daoSettingsDto)
            const localVarPath = `/api/settings/{chainId}/{daoId}`
                .replace(`{${"daoId"}}`, encodeURIComponent(String(daoId)))
                .replace(`{${"chainId"}}`, encodeURIComponent(String(chainId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(daoSettingsDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DaoApi - functional programming interface
 * @export
 */
export const DaoApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DaoApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} chainId 
         * @param {string} daoId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async daoSettingsControllerGetSettings(chainId: string, daoId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DaoSettingsDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.daoSettingsControllerGetSettings(chainId, daoId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} daoId 
         * @param {string} chainId 
         * @param {DaoSettingsDto} daoSettingsDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async daoSettingsControllerSetSettings(daoId: string, chainId: string, daoSettingsDto: DaoSettingsDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DaoSettingsDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.daoSettingsControllerSetSettings(daoId, chainId, daoSettingsDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DaoApi - factory interface
 * @export
 */
export const DaoApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DaoApiFp(configuration)
    return {
        /**
         * 
         * @param {string} chainId 
         * @param {string} daoId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        daoSettingsControllerGetSettings(chainId: string, daoId: string, options?: any): AxiosPromise<DaoSettingsDto> {
            return localVarFp.daoSettingsControllerGetSettings(chainId, daoId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} daoId 
         * @param {string} chainId 
         * @param {DaoSettingsDto} daoSettingsDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        daoSettingsControllerSetSettings(daoId: string, chainId: string, daoSettingsDto: DaoSettingsDto, options?: any): AxiosPromise<DaoSettingsDto> {
            return localVarFp.daoSettingsControllerSetSettings(daoId, chainId, daoSettingsDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DaoApi - object-oriented interface
 * @export
 * @class DaoApi
 * @extends {BaseAPI}
 */
export class DaoApi extends BaseAPI {
    /**
     * 
     * @param {string} chainId 
     * @param {string} daoId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DaoApi
     */
    public daoSettingsControllerGetSettings(chainId: string, daoId: string, options?: AxiosRequestConfig) {
        return DaoApiFp(this.configuration).daoSettingsControllerGetSettings(chainId, daoId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} daoId 
     * @param {string} chainId 
     * @param {DaoSettingsDto} daoSettingsDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DaoApi
     */
    public daoSettingsControllerSetSettings(daoId: string, chainId: string, daoSettingsDto: DaoSettingsDto, options?: AxiosRequestConfig) {
        return DaoApiFp(this.configuration).daoSettingsControllerSetSettings(daoId, chainId, daoSettingsDto, options).then((request) => request(this.axios, this.basePath));
    }
}


